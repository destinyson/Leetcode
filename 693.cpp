/**************************************693 - 交替位二进制数*************************************

给定一个正整数，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相等。

示例 1:

输入: 5
输出: True
解释:
5的二进制数是: 101

示例 2:

输入: 7
输出: False
解释:
7的二进制数是: 111

示例 3:

输入: 11
输出: False
解释:
11的二进制数是: 1011

示例 4:

输入: 10
输出: True
解释:
10的二进制数是: 1010
*****************************************************************************************************/

//交替位二进制数一定是公比为4的等比数列的和值，且数列首项一定是1或2

//首先4的倍数可以排除，之后若为偶数将其除以2

//由等比数列求和公式可得，若一个数n是交替位二进制数，则3n+1一定是4的整数幂

class Solution {
public:
    bool hasAlternatingBits(int n) {
        if (n % 4 == 0)
            return false;
        if (n % 2 == 0)
            n = n >> 1;
        long long temp = 3 * (long long)n + 1;
        return pow(4, (int)(log(temp) / log(4))) == temp;
    }
};
