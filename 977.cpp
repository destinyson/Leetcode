/**************************************977 - 有序数组的平方*************************************

给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。



示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]


提示：

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A 已按非递减顺序排序。
*****************************************************************************************************/

//双指针问题，平方数大的数必在两侧

//设首尾双指针，比较平方值，倒序填充进结果向量，并向中间移动，直到结果向量被填满

class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        int len = A.size();
        vector<int> ans(len);
        int i = 0;
        int j = len - 1;
        int pos = len - 1;
        while (pos >= 0)
        {
            if (A[i] * A[i] >= A[j] * A[j])
            {
                ans[pos] = A[i] * A[i];
                i++;
            }
            else
            {
                ans[pos] = A[j] * A[j];
                j--;
            }
            pos--;
        }
        return ans;
    }
};
