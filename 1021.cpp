/**************************************1021 - 删除最外层的括号*************************************

有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。



示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
示例 2：

输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
示例 3：

输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。


提示：

S.length <= 10000
S[i] 为 "(" 或 ")"
S 是一个有效括号字符串
*****************************************************************************************************/

//将每个'('看作+1，')'看作-1

//设变量flag，用于探测最外层括号

//如果某位置字符不是最外层括号，就加入结果字符串

class Solution {
public:
    string removeOuterParentheses(string S) {
        int flag = 0;
        string ans;
        int len = S.length();
        for (int i = 0; i < len; i++)
        {
            if (S[i] == '(')
                flag++;
            else if (S[i] == ')')
                flag--;
            if (!((flag == 1 && S[i] == '(') || (flag == 0 && S[i] == ')')))
                ans.append(1, S[i]);
        }
        return ans;
    }
};
